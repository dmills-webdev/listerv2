{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodoForm.js","App.js","index.js"],"names":["classes","classNames","TodoItem","id","task","completed","toggleCompleted","removeTodo","className","type","value","checked","onChange","onClick","TodoList","todos","map","todo","key","NewTodoForm","submitNewTodo","useState","updateTask","onSubmit","e","preventDefault","handleSubmit","autoComplete","name","placeholder","target","App","todosStorage","JSON","parse","window","localStorage","getItem","initialTodos","modifyTodos","useEffect","setItem","stringify","updatedTodos","filter","newTask","newTodo","Date","getTime","oldTodos","ReactDOM","render","document","getElementById"],"mappings":"kLAGMA,E,MAAUC,GAAW,CACrB,eAAe,EACf,eAAe,IAyBNC,EAtBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,gBAAiBC,EAAzC,EAAyCA,WAAzC,OACf,yBAAKC,UAAU,aACb,2BACEC,KAAK,WACLC,MAAOL,EACPM,QAASN,EACTO,SAAU,kBAAMN,EAAgBH,MAElC,0BAAMK,UAAWH,EAAY,iBAAmB,MAAhD,IACGD,GAGH,4BACEK,KAAK,SACLD,UAAWR,EACXa,QAAS,kBAAMN,EAAWJ,KAH5B,YCIWW,EArBE,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOT,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,WAC1C,OACE,yBAAKC,UAAU,kBAEXO,EAAMC,KAAI,SAAAC,GACR,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKd,GACVG,gBAAiBA,EACjBC,WAAYA,EAEZJ,GAAIc,EAAKd,GACTC,KAAMa,EAAKb,KACXC,UAAWY,EAAKZ,iBCuBfc,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACdC,mBAAS,IADK,mBACnCjB,EADmC,KAC7BkB,EAD6B,KAezC,OACE,yBAAKd,UAAU,iBACb,0BAAMe,SAAU,SAACC,GAAD,OARC,SAACA,GACpBJ,EAAchB,GACdkB,EAAW,IACXE,EAAEC,iBAKuBC,CAAaF,IAAIG,aAAa,OACnD,+BACE,2BACEC,KAAK,OACLlB,MAAON,EACPyB,YAAY,wBACZjB,SApBgB,SAACY,GACzBF,EACEE,EAAEM,OAAOpB,QAmBHD,KAAK,UAIT,4BACEA,KAAK,UADP,QC0COsB,G,MAnEH,WAEV,IAAIC,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,iBAEtDC,EAAe,CAAC,CAClBnC,GAAI,EACJC,KAAM,mBACNC,WAAW,IAET2B,IACFM,EAAeN,GAVD,MAaaX,mBAASiB,GAbtB,mBAaVvB,EAbU,KAaHwB,EAbG,KAehBC,qBAAU,WACRL,OAAOC,aAAaK,QAAQ,eAAgBR,KAAKS,UAAU3B,MAC3D,CAACA,IAmCH,OACE,6BACE,0CACA,8BACE,kBAAC,EAAD,CACEA,MAAOA,EACPT,gBAnBgB,SAACH,GACvB,IAAIwC,EAAe5B,EAAMC,KAAI,SAAAC,GAI3B,OAHIA,EAAKd,KAAOA,IACdc,EAAKZ,WAAaY,EAAKZ,WAElBY,KAETsB,EACEI,IAYIpC,WA3BW,SAACJ,GAClBoC,EACExB,EAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKd,KAAOA,SA0B/B,kBAAC,EAAD,CACEiB,cAzCc,SAACyB,GACrB,IAEIC,EAAU,CACZ3C,IAHM,IAAI4C,MACQC,UAGlB5C,KAAMyC,EACNxC,WAAW,GAEbkC,GAAY,SAAAU,GAAQ,4BAAQA,GAAR,CAAkBH,cC5B1CI,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.95983ec3.chunk.js","sourcesContent":["import React from \"react\"\nimport classNames from \"classnames\"\n\nconst classes = classNames({ // Apply multiple classes to the element\n      \"remove-todo\": true,\n      \"float-right\": true\n    })\n\nconst TodoItem = ({ id, task, completed, toggleCompleted, removeTodo }) => (\n  <div className=\"todo-item\">\n    <input\n      type=\"checkbox\"\n      value={completed}\n      checked={completed}\n      onChange={() => toggleCompleted(id)}/>\n\n    <span className={completed ? \"completed-todo\" : null}> {/*Toggle styling if todo is completed*/}\n      {task}\n    </span>\n\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={() => removeTodo(id)}>\n      Remove\n    </button>\n\n  </div>\n)\n\nexport default TodoItem\n","import React from \"react\"\nimport TodoItem from \"./TodoItem\"\n\nconst TodoList = ({ todos, toggleCompleted, removeTodo }) => {\n  return(\n    <div className=\"todo-container\">\n      {\n        todos.map(todo => {\n          return(\n            <TodoItem\n              key={todo.id}\n              toggleCompleted={toggleCompleted}\n              removeTodo={removeTodo}\n\n              id={todo.id}\n              task={todo.task}\n              completed={todo.completed}/>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default TodoList\n","import React, { useState } from \"react\"\n\nconst NewTodoForm = ({ submitNewTodo }) => {\n  let [ task, updateTask ] = useState(\"\")\n\n  const handleInputChange = (e) => {\n    updateTask(\n      e.target.value\n    )\n  }\n\n  const handleSubmit = (e) => {\n    submitNewTodo(task)   // Submit todo\n    updateTask(\"\")        // Clear textbox\n    e.preventDefault()    // Prevent form submission\n  }\n\n  return(\n    <div className=\"new-todo-form\">\n      <form onSubmit={(e) => handleSubmit(e)} autoComplete=\"off\">\n        <label>\n          <input\n            name=\"task\"\n            value={task}\n            placeholder=\"E.g. Water the plants\"\n            onChange={handleInputChange}\n            type=\"text\">\n          </input>\n        </label>\n\n        <button\n          type=\"submit\">\n            +\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewTodoForm\n","import React, { useState, useEffect } from \"react\"\nimport TodoList from \"./TodoList\"\nimport NewTodoForm from \"./NewTodoForm\"\nimport \"./app.css\"\n\nconst App = () => {\n/////////////////////////////////////////////////////////////// Initialise todos\n  let todosStorage = JSON.parse(window.localStorage.getItem('todosStorage'))\n\n  let initialTodos = [{\n    id: 1,\n    task: \"Write first todo\",\n    completed: false\n  }]\n  if (todosStorage) {\n    initialTodos = todosStorage\n  }\n\n  let [ todos, modifyTodos ] = useState(initialTodos)\n\n  useEffect(() => {\n    window.localStorage.setItem(\"todosStorage\", JSON.stringify(todos))\n  },[todos])\n\n/////////////////////////////////////////////////////////////////// Add new todo\n  const submitNewTodo = (newTask) => {\n    let d = new Date()\n    let timeBasedID = d.getTime() //Generates a unique ID based on the time the todo is submitted\n    let newTodo = {\n      id: timeBasedID,\n      task: newTask,\n      completed: false\n    }\n    modifyTodos(oldTodos => [...oldTodos, newTodo])\n  }\n\n//////////////////////////////////////////////////////////////////// Remove todo\n  const removeTodo = (id) => {\n    modifyTodos(\n      todos.filter(todo => todo.id !== id)\n    )\n  }\n\n///////////////////////////////////////////////////////////// Toggle todo status\n  const toggleCompleted = (id) => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    })\n    modifyTodos(\n      updatedTodos\n    )\n  }\n\n///////////////////////////////////////////////////////////////// Presentational\n  return(\n    <div>\n      <header>Lister</header>\n      <main>\n        <TodoList\n          todos={todos}\n          toggleCompleted={toggleCompleted}\n          removeTodo={removeTodo}/>\n        <NewTodoForm\n          submitNewTodo={submitNewTodo}/>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}